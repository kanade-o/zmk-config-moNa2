#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 7>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <7 20>;
        };

        single_quotation {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <21 20>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 19>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 31>;
        };

        grave {
            bindings = <&kp TILDE>;
            key-positions = <1 2>;
        };

        eq2 {
            bindings = <&kp KP_EQUAL>;
            key-positions = <7 6>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <30 31>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <24 25>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <23 24>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E             &kp R                       &kp T                                           &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D             &kp F                       &kp G        &trans              &kp DELETE     &kp H        &kp J  &kp K      &kp L    &lt 3 SEMICOLON
&mt LEFT_SHIFT Z    &kp X         &kp C             &kp V                       &kp B        &lt 4 C_VOL_DN      &kp TAB        &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp ESC             &kp LEFT_ALT  &kp LEFT_CONTROL  &mt LEFT_COMMAND LC(SPACE)  &lt 2 SPACE  &mt LEFT_ALT TAB    &kp BACKSPACE  &lt 1 ENTER                             &kp ESCAPE
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        num_and_symbols {
            bindings = <
&kp GRAVE        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9   &kp AT                                           &kp QUESTION   &kp PERCENT           &kp PLUS               &kp ASTERISK    &kp KP_EQUAL
&kp KP_DOT       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6   &kp HASH      &kp LC(LA(KP_NUMBER_0))    &trans  &kp EXCL       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3   &kp QUESTION  &trans                     &trans  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET       &kp DOLLAR
&trans           &trans           &kp COMMA        &kp LEFT_COMMAND  &trans        &trans                     &trans  &trans                                                                      &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        arrow_and_func {
            bindings = <
&kp LS(LG(NUMBER_4))  &kp LC(LG(F))       &kp LG(PLUS)            &kp LG(MINUS)      &kp F11                                &trans    &trans          &trans        &trans           &trans
&kp LEFT_CONTROL      &kp LC(LEFT_ARROW)  &kp LC(UP_ARROW)        &kp LG(SPACE)      &kp LC(RIGHT_ARROW)  &trans    &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp TAB
&kp LEFT_SHIFT        &trans              &kp LA(LC(LEFT_ARROW))  &kp LA(LC(RIGHT))  &kp LA(UP_ARROW)     &trans    &trans  &trans    &kp HOME        &kp END       &trans           &trans
&trans                &trans              &trans                  &kp LEFT_COMMAND   &trans               &trans    &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        mouse {
            bindings = <
&trans  &trans  &trans     &trans     &trans                    &trans    &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans     &trans     &trans  &trans    &trans  &mkp MB4  &mkp MB1  &mkp MB2  &mkp MB5  &trans
&trans  &trans  &kp LG(C)  &kp LG(V)  &trans  &trans    &trans  &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans     &trans     &trans  &trans    &trans  &trans                                  &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
